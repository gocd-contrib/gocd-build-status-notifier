/*
 * Copyright 2019 ThoughtWorks, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
    id 'java'
    id 'co.riiid.gradle' version '0.4.2'
}

apply from: 'plugin-helpers.gradle'
apply plugin: 'co.riiid.gradle'


project.ext.pluginVersion = '1.7.0'
project.ext.fullVersion = project.git.distVersion() ? "${project.pluginVersion}-${project.git.distVersion()}" : project.pluginVersion

project.ext.pluginDesc = [
        repo       : rootProject.name,
        version    : project.fullVersion,
        goCdVersion: '20.9.0',
        vendorName : 'GoCD Contributors',
        vendorUrl  : 'https://github.com/gocd-contrib/gocd-build-status-notifier'
]

repositories {
    mavenCentral()
}

allprojects {
    apply plugin: 'java'

    group = 'com.tw.go.plugin'
    version = project.fullVersion

    sourceCompatibility = 1.8
}

subprojects { Project sub ->
    repositories {
        jcenter()
        mavenLocal()
    }

    dependencies {
        compileOnly 'cd.go.plugin:go-plugin-api:19.7.0'
        compile 'com.google.code.gson:gson:2.8.7'
        compile 'commons-io:commons-io:2.8.0'
        compile 'org.apache.httpcomponents:httpclient:4.5.13'
        compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    }

    sourceSets {
        test {
            java {
                compileClasspath += configurations.compileOnly
                runtimeClasspath += configurations.compileOnly
            }
        }
    }

    jar {
        from(configurations.compile) {
            into "lib/"
        }
    }

    if (!sub.name.equalsIgnoreCase("common")) {
        apply from: "${rootProject.projectDir}/plugin-tasks.gradle"
    }
}

github {
    def lastCommit = project.git.gitRevision()

    owner = System.getenv('GITHUB_USER') ?: 'bob'
    repo = project.pluginDesc.repo
    token = System.getenv('GITHUB_TOKEN') ?: 'bad-token'
    targetCommitish = lastCommit
    prerelease = !"No".equalsIgnoreCase(System.getenv('PRERELEASE'))
    assets = subprojects.findAll { "common" != it.name }
            .collect { it.jar.outputs.files.files }
            .flatten()

    tagName = "${project.fullVersion}${prerelease ? '-exp' : ''}"
    name = "${prerelease ? 'Experimental: ' : ''}${project.fullVersion}"

    def lastTag = project.git.getLastTag(prerelease)
    def changelogHeader = lastTag ? "### Changelog ${lastTag}..${lastCommit.substring(0, 7)}" : "### Changelog"
    def changeLog = project.git.getCommitsSinceLastTag(lastTag).replaceAll("\"", "")

    body = """\n$changelogHeader\n\n${changeLog}\n""".stripIndent().trim()
}

githubRelease.dependsOn project.subprojects*.tasks*.findByName('assemble').findAll { it != null }